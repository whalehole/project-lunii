services:
  grafana:
    image: grafana/grafana:12.0.2 # if error use grafana/grafana:9.3.2 
    container_name: grafana
    restart: unless-stopped
    ports: 
      - "3000:3000"
    volumes:
      - grafana_storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - server-side

  prometheus:
    image: prom/prometheus:v2.53.4 # if error use prom/prometheus:v2.40.0
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_storage:/prometheus
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    command:
      # - '--config.file=/etc/prometheus/prometheus.yaml'
      # - '--storage.tsdb.path=/prometheus'
      # - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      # - '--web.console.templates=/usr/share/prometheus/consoles'
      # - '--web.enable-lifecycle'
      - '--config.file=/etc/prometheus/prometheus.yaml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'      # Adjust retention period
      - '--storage.tsdb.wal-compression'         # Compress write-ahead log
      - '--web.enable-lifecycle'                 # Enable runtime reloading
    networks:
      - server-side

  node-exporter:
    image: prom/node-exporter:v1.9.1
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.rootfs=/rootfs'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.udev.data=/rootfs/run/udev/data'
      # - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($|/)' deprecated
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($|/)'
    ports:
      - "9100:9100"
    networks:
      - server-side
    restart: unless-stopped

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.52.1
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "8080:8080"
    networks:
      - server-side
    restart: unless-stopped

  alertmanager:
    image: prom/alertmanager:v0.28.1
    container_name: alertmanager
    volumes:
      - ./alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yaml'
      - '--storage.path=/alertmanager'
    ports:
      - "9093:9093"
    networks:
      - server-side
    restart: unless-stopped

  majestic-service:
    build:
      context: ../backend/majestic-service
      dockerfile: ./Dockerfile
      target: final
    container_name: majestic-service
    environment:
      - ADDRESS=0.0.0.0:55000
      - PG_DBNAME=postgres
      - PG_HOST=postgres
      - PG_USER=postgres
      - PG_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "55000:55000"
    restart: unless-stopped
    networks:
      - server-side

  live-chat-service:
    build:
      context: ../backend/live-chat-service
      dockerfile: ./Dockerfile
      target: final
    container_name: live-chat-service
    ports:
      - "55001:55001"
    restart: unless-stopped
    networks:
      - server-side

  localstack:
    container_name: "${LOCALSTACK_DOCKER_NAME:-localstack-main}"
    image: localstack/localstack:4.5.0
    ports:
      - "127.0.0.1:4566:4566"            # LocalStack Gateway
      - "127.0.0.1:4510-4559:4510-4559"  # external services port range
    environment:
      # LocalStack configuration: https://docs.localstack.cloud/references/configuration/
      - DEBUG=${DEBUG:-0}
      - PERSISTENCE=1 # No PERSISTENCE for localstack free tier, so it won't work
    volumes:
      # - "${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack"
      - localstack-data:/var/lib/localstack
      - ./scripts/localstack/init.sh:/etc/localstack/init/ready.d/init-aws.sh
      - "/var/run/docker.sock:/var/run/docker.sock"
    restart: unless-stopped
    networks:
      - server-side
  
  postgres:
    container_name: "postgres"
    image: postgres@sha256:6cf6142afacfa89fb28b894d6391c7dcbf6523c33178bdc33e782b3b533a9342
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks: 
      - server-side
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

volumes:
  grafana_storage: {}
  prometheus_storage: {}
  postgres-data: {}
  localstack-data: {}

networks:
  server-side:
    driver: bridge


