services:
  grafana:
    image: grafana/grafana:12.0.2 # if error use grafana/grafana:9.3.2 
    container_name: grafana
    restart: unless-stopped
    ports: 
      - "3000:3000"
    volumes:
      - grafana_storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - server-side

  prometheus:
    image: prom/prometheus:v2.53.4 # if error use prom/prometheus:v2.40.0
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_storage:/prometheus
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    command:
      # - '--config.file=/etc/prometheus/prometheus.yaml'
      # - '--storage.tsdb.path=/prometheus'
      # - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      # - '--web.console.templates=/usr/share/prometheus/consoles'
      # - '--web.enable-lifecycle'
      - '--config.file=/etc/prometheus/prometheus.yaml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'      # Adjust retention period
      - '--storage.tsdb.wal-compression'         # Compress write-ahead log
      - '--web.enable-lifecycle'                 # Enable runtime reloading
    networks:
      - server-side

  node-exporter:
    image: prom/node-exporter:v1.9.1
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.rootfs=/rootfs'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.udev.data=/rootfs/run/udev/data'
      # - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($|/)' deprecated
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($|/)'
    ports:
      - "9100:9100"
    networks:
      - server-side
    restart: unless-stopped

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.52.1
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "8080:8080"
    networks:
      - server-side
    restart: unless-stopped

  alertmanager:
    image: prom/alertmanager:v0.28.1
    container_name: alertmanager
    volumes:
      - ./alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yaml'
      - '--storage.path=/alertmanager'
    ports:
      - "9093:9093"
    networks:
      - server-side
    restart: unless-stopped

  majestic-service:
    build:
      context: ../backend/majestic-service
      dockerfile: ./Dockerfile
      target: final
    container_name: majestic-service
    image: majestic-service:dev
    environment:
      - APPLICATION_PORT=55000
      - PG_DBNAME=postgres
      - PG_HOST=postgres
      - PG_USER=postgres
      - PG_PASSWORD=${POSTGRES_PASSWORD}
      - RUST_LOG=DEBUG
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_ENDPOINT_URL=${AWS_ENDPOINT_URL}
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_FORCE_PATH_STYLE=${AWS_S3_FORCE_PATH_STYLE}
    ports:
      - "55000:55000"
    restart: unless-stopped
    networks:
      - server-side

  live-chat-service:
    build:
      context: ../backend/live-chat-service
      dockerfile: ./Dockerfile
      target: final
    container_name: live-chat-service
    image: live-chat-service:dev
    ports:
      - "55001:55001"
    restart: unless-stopped
    networks:
      - server-side

  localstack:
    container_name: "${LOCALSTACK_DOCKER_NAME:-localstack-main}"
    image: localstack/localstack:4.5.0
    ports:
      - "127.0.0.1:4566:4566"            # LocalStack Gateway
      - "127.0.0.1:4510-4559:4510-4559"  # external services port range
    environment:
      # LocalStack configuration: https://docs.localstack.cloud/references/configuration/
      - DEBUG=${DEBUG:-0}
      - PERSISTENCE=1 # No PERSISTENCE for localstack free tier, so it won't work
      - AWS_DEFAULT_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      # - "${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack"
      - localstack-data:/var/lib/localstack
      - ./localstack/configs/init.sh:/etc/localstack/init/ready.d/init-aws.sh
      - "/var/run/docker.sock:/var/run/docker.sock"
      - ./localstack/assets:/assets
      - ./localstack/configs:/configs
    restart: unless-stopped
    networks:
      - server-side
  
  postgres:
    container_name: "postgres"
    image: postgres@sha256:6cf6142afacfa89fb28b894d6391c7dcbf6523c33178bdc33e782b3b533a9342
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks: 
      - server-side
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

  kafka-controller-1:
    container_name: kafka-controller-1
    image: apache/kafka:4.0.0
    environment:
      - KAFKA_NODE_ID=1
      - KAFKA_PROCESS_ROLES=controller
      - KAFKA_LISTENERS=CONTROLLER://:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka-controller-1:9093,2@kafka-controller-2:9093,3@kafka-controller-3:9093
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
    networks: 
      - server-side
    restart: unless-stopped
    volumes:
      - kafka-controller-1-data:/var/lib/kafka/data

  kafka-controller-2:
    container_name: kafka-controller-2
    image: apache/kafka:4.0.0
    environment:
      - KAFKA_NODE_ID=2
      - KAFKA_PROCESS_ROLES=controller
      - KAFKA_LISTENERS=CONTROLLER://:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka-controller-1:9093,2@kafka-controller-2:9093,3@kafka-controller-3:9093
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
    networks: 
      - server-side
    restart: unless-stopped
    volumes:
      - kafka-controller-2-data:/var/lib/kafka/data

  kafka-controller-3:
    container_name: kafka-controller-3
    image: apache/kafka:4.0.0
    environment:
      - KAFKA_NODE_ID=3
      - KAFKA_PROCESS_ROLES=controller
      - KAFKA_LISTENERS=CONTROLLER://:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka-controller-1:9093,2@kafka-controller-2:9093,3@kafka-controller-3:9093
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
    networks: 
      - server-side
    restart: unless-stopped
    volumes:
      - kafka-controller-3-data:/var/lib/kafka/data

  kafka-broker-1:
    container_name: kafka-broker-1
    image: apache/kafka:4.0.0
    ports:
      - "29092:9092"
    environment:
      - KAFKA_NODE_ID=4
      - KAFKA_PROCESS_ROLES=broker
      - KAFKA_LISTENERS=PLAINTEXT://:19092,PLAINTEXT_HOST://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka-broker-1:19092,PLAINTEXT_HOST://localhost:29092
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka-controller-1:9093,2@kafka-controller-2:9093,3@kafka-controller-3:9093
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
    depends_on:
      - kafka-controller-1
      - kafka-controller-2
      - kafka-controller-3
    networks: 
      - server-side
    restart: unless-stopped
    volumes:
      - kafka-broker-1-data:/var/lib/kafka/data

  kafka-broker-2:
    container_name: kafka-broker-2
    image: apache/kafka:4.0.0
    ports:
      - "39092:9092"
    environment:
      - KAFKA_NODE_ID=5
      - KAFKA_PROCESS_ROLES=broker
      - KAFKA_LISTENERS=PLAINTEXT://:19092,PLAINTEXT_HOST://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka-broker-2:19092,PLAINTEXT_HOST://localhost:39092
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka-controller-1:9093,2@kafka-controller-2:9093,3@kafka-controller-3:9093
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
    depends_on:
      - kafka-controller-1
      - kafka-controller-2
      - kafka-controller-3
    networks: 
      - server-side
    restart: unless-stopped
    volumes:
      - kafka-broker-2-data:/var/lib/kafka/data

  kafka-broker-3:
    container_name: kafka-broker-3
    image: apache/kafka:4.0.0
    ports:
      - "49092:9092"
    environment:
      - KAFKA_NODE_ID=6
      - KAFKA_PROCESS_ROLES=broker
      - KAFKA_LISTENERS=PLAINTEXT://:19092,PLAINTEXT_HOST://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka-broker-3:19092,PLAINTEXT_HOST://localhost:49092
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka-controller-1:9093,2@kafka-controller-2:9093,3@kafka-controller-3:9093
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
    depends_on:
      - kafka-controller-1
      - kafka-controller-2
      - kafka-controller-3
    networks: 
      - server-side
    restart: unless-stopped
    volumes:
      - kafka-broker-3-data:/var/lib/kafka/data

  flink-jobmanager-1:
    container_name: flink-jobmanager-1
    image: apache/flink:2.0.0
    platform: linux/amd64
    ports:
      - "8081:8081"
    command: standalone-job --job-classname org.projectlunii.DataStreamJob [--job-id <job id>] [--jars /opt/flink/usrlib/dataprocess-1.0-SNAPSHOT.jar] [--allowNonRestoredState] [job arguments]
    volumes:
      - ./../data-processing/dataprocess/target/dataprocess-1.0-SNAPSHOT.jar:/opt/flink/usrlib/dataprocess-1.0-SNAPSHOT.jar
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager-1
        parallelism.default: 2   
    networks:
      - server-side
    restart: unless-stopped
  
  flink-taskmanager-1:
    container_name: flink-taskmanager-1
    image: apache/flink:2.0.0
    platform: linux/amd64
    depends_on:
      - flink-jobmanager-1
    command: taskmanager
    scale: 1
    volumes:
      - ./../data-processing/dataprocess/target/dataprocess-1.0-SNAPSHOT.jar:/opt/flink/usrlib/dataprocess-1.0-SNAPSHOT.jar
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager-1
        taskmanager.numberOfTaskSlots: 2
        parallelism.default: 2  
    networks:
      - server-side
    restart: unless-stopped
    
  redpanda-console:
    container_name: redpanda-console
    image: redpandadata/console:v2.8.6
    ports:
      - "28080:8080"
    environment:
      - KAFKA_BROKERS=kafka-broker-1:19092,kafka-broker-2:19092,kafka-broker-3:19092
    networks:
      - server-side
    restart: unless-stopped

  loki:
    image: grafana/loki:3.4.4
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/config.yml
    volumes:
      - ./loki/config.yaml:/etc/loki/config.yml
      - loki-data:/loki
    networks: 
      - server-side
    restart: unless-stopped

  alloy:
    image: grafana/alloy:v1.9.1
    container_name: alloy
    ports:
      - "12345:12345"
    volumes:
      - ./alloy/config.yaml:/etc/alloy/config.alloy
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command:
      - run
      - --server.http.listen-addr=0.0.0.0:12345
      - --storage.path=/var/lib/alloy/data
      - /etc/alloy/config.alloy
      - --config.format=promtail
    networks: 
      - server-side
    restart: unless-stopped
    depends_on:
      - loki

  dozzle:
    image: amir20/dozzle:v8.13
    container_name: dozzle
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "18080:8080"
    environment:
      # Uncomment to enable container actions (stop, start, restart). See https://dozzle.dev/guide/actions
      - DOZZLE_ENABLE_ACTIONS=true
      #
      # Uncomment to allow access to container shells. See https://dozzle.dev/guide/shell
      - DOZZLE_ENABLE_SHELL=true
    networks:
      - server-side
    restart: unless-stopped

  spark:
    image: bitnami/spark:4.0.0
    container_name: spark
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    ports:
      - "38080:8080"
    networks:
      - server-side
    restart: unless-stopped
  
  spark-worker:
    image: bitnami/spark:4.0.0
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    networks:
      - server-side
    restart: unless-stopped

  lunii-web-app:
    container_name: lunii-web-app
    image: lunii-web-app:dev
    build:
      context: ../lunii-web-app
      dockerfile: ./Dockerfile
      target: final
    environment:
      NODE_ENV: production
    ports:
      - 13000:3000
    
  lunii-ai:
    container_name: lunii-ai
    image: lunii-ai:dev
    build:
      context: ../ai
      dockerfile: ./Dockerfile
    volumes:
      - lunii-ai-storage:/appdata
    ports:
      - 50080:80
    networks:
      - server-side

volumes:
  grafana_storage: {}
  prometheus_storage: {}
  postgres-data: {}
  localstack-data: {}
  kafka-controller-1-data: {}
  kafka-controller-2-data: {}
  kafka-controller-3-data: {}
  kafka-broker-1-data: {}
  kafka-broker-2-data: {}
  kafka-broker-3-data: {}
  loki-data: {}
  lunii-ai-models-storage: {}

networks:
  server-side:
    driver: bridge


